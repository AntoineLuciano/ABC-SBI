#!/usr/bin/env python3
"""
Plot MCMC Output Command - Visualize MCMC diagnostics and traces for a specific method.

This command loads MCMC results from an npz file (generated by run_mcmc command)
and creates diagnostic plots (traces, marginals, autocorrelations) for a selected method.
"""

import argparse
import numpy as np
from pathlib import Path
from typing import Dict, Tuple, Optional, Any, Union
from logging import getLogger

from abcnre.diagnostics.viz import plot_mcmc_output
from .utils import handle_output_path, add_boolean_flag

logger = getLogger(__name__)


def plot_mcmc_output_command(args):
    """
    Main command function for plotting MCMC output diagnostics.

    Args:
        args: Parsed command line arguments
    """
    logger.info("=== ABC-NRE Plot MCMC Output ===")

    # Validate input file
    npz_file = Path(args.npz_file)
    if not npz_file.exists():
        raise FileNotFoundError(f"NPZ file not found: {npz_file}")

    # Load npz file
    try:
        mcmc_data = np.load(npz_file, allow_pickle=True)
    except Exception as e:
        raise FileNotFoundError(f"Could not load npz file: {e}")

    # Determine which method to plot
    method_to_plot = None
    available_methods = list(mcmc_data.files)

    if args.nre and "nre_standard" in available_methods:
        method_to_plot = "nre_standard"
    elif args.corrected_nre and "nre_corrected" in available_methods:
        method_to_plot = "nre_corrected"
    elif args.true and "true_posterior" in available_methods:
        method_to_plot = "true_posterior"
    else:
        # Default to first available method
        if available_methods:
            method_to_plot = available_methods[0]
            logger.info(
                f"No specific method selected. Using first available: {method_to_plot}"
            )
        else:
            raise ValueError("No valid methods found in npz file")

    if method_to_plot is None:
        raise ValueError(
            f"Requested method not found. Available methods: {available_methods}"
        )

    logger.info(f"Plotting MCMC output for method: {method_to_plot}")

    # Extract method data
    method_data = mcmc_data[method_to_plot].item()  # Convert to dict

    if "samples" not in method_data:
        raise ValueError(f"No 'samples' found for method '{method_to_plot}'")

    # Parse parameter names
    parameter_names = None
    if args.parameter_names:
        parameter_names = args.parameter_names.split(",")
        parameter_names = [name.strip() for name in parameter_names]

    # Parse true values
    true_values = None
    if args.true_values:
        try:
            true_values = np.array(
                [float(x.strip()) for x in args.true_values.split(",")]
            )
        except ValueError:
            raise ValueError("True values must be comma-separated numbers")

    # Parse figure size
    figsize = None
    if args.figsize:
        try:
            width, height = args.figsize.split(",")
            figsize = (int(width.strip()), int(height.strip()))
        except ValueError:
            raise ValueError("figsize must be in format 'width,height'")

    # Setup save path
    save_path = None
    if args.save_path:
        save_path = handle_output_path(args.save_path, "mcmc_output.png")

    # Log method info
    samples = np.array(method_data["samples"])
    acceptance_rate = method_data.get("acceptance_rate", "Unknown")

    logger.info(f"  Method: {method_to_plot}")
    logger.info(f"  Samples shape: {samples.shape}")
    logger.info(f"  Acceptance rate: {acceptance_rate}")

    # Run the plotting function
    try:
        plot_mcmc_output(
            mcmc_results=method_data,
            true_values=true_values,
            parameter_names=parameter_names,
            title=f"{method_to_plot.replace('_', ' ').title()} - MCMC Diagnostics",
            save_path=str(save_path) if save_path else None,
            figsize=figsize,
            autocorrelation=not args.no_autocorr,
            log_probability_trace=not args.no_log_prob_trace,
            probability_trace=args.prob_trace,
            show=not args.no_show,
        )

        logger.info("MCMC output plots completed!")
        if save_path:
            logger.info(f"Plot saved to: {save_path}")

    except Exception as e:
        logger.error(f"Error generating plots: {e}")
        raise


def setup_plot_mcmc_output_parser(subparsers):
    """Setup argument parser for plot_mcmc_output command."""
    parser = subparsers.add_parser(
        "plot_mcmc_output",
        help="Plot MCMC output diagnostics for a specific method",
        description="""
        Load MCMC results from an npz file and create diagnostic plots 
        (traces, marginals, autocorrelations) for a selected method.
        
        The npz file should contain results from the 'run_mcmc' command with structure:
        npz[method_name]["samples"] = array of samples (n_samples, n_dims)
        """,
    )

    # Required arguments
    parser.add_argument(
        "npz_file", type=str, help="Path to npz file containing MCMC results"
    )

    # Method selection arguments (mutually exclusive)
    method_group = parser.add_mutually_exclusive_group()
    method_group.add_argument(
        "--nre",
        action="store_true",
        help="Plot NRE Standard method output",
    )

    method_group.add_argument(
        "--corrected-nre",
        action="store_true",
        help="Plot NRE Corrected method output",
    )

    method_group.add_argument(
        "--true",
        action="store_true",
        help="Plot True Posterior method output",
    )

    # Optional arguments
    parser.add_argument(
        "--parameter-names",
        type=str,
        help="Comma-separated parameter names for labels (e.g., 'θ₁,θ₂,θ₃')",
    )

    parser.add_argument(
        "--true-values",
        type=str,
        help="Comma-separated true parameter values to overlay (e.g., '1.5,0.8,2.1')",
    )

    parser.add_argument(
        "--figsize",
        type=str,
        help="Figure size as 'width,height' (e.g., '15,10')",
    )

    parser.add_argument(
        "--save-path",
        type=str,
        help="Path to save the diagnostic figure (auto-adds .png if directory)",
    )

    # Plot control options - use utility function for standardized boolean flags
    add_boolean_flag(parser, "show", default=True, help_text="Show the plot")

    parser.add_argument(
        "--no-autocorr",
        action="store_true",
        help="Skip autocorrelation plots",
    )

    parser.add_argument(
        "--no-log-prob-trace",
        action="store_true",
        help="Skip log probability trace plot",
    )

    parser.add_argument(
        "--prob-trace",
        action="store_true",
        help="Show probability trace (exp of log probabilities)",
    )

    parser.set_defaults(func=plot_mcmc_output_command)
    return parser
