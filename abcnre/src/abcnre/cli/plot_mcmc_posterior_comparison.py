#!/usr/bin/env python3
"""
Plot MCMC Posterior Comparison Command - Visualize posterior distributions from MCMC results.

This command loads MCMC results from an npz file (generated by run_mcmc command)
and creates comparison plots of 1D and 2D marginal distributions across different methods.
"""

import argparse
import numpy as np
from pathlib import Path
from typing import Dict, Tuple, Optional, Any, Union
from logging import getLogger

from abcnre.diagnostics.viz import (
    plot_1D_marginal_comparison,
    plot_2D_marginal_comparison,
)
from .utils import handle_output_path, add_boolean_flag

logger = getLogger(__name__)


def plot_mcmc_posterior_comparison(
    npz_file_path: str,
    parameter_names: Optional[list] = None,
    true_values: Optional[np.ndarray] = None,
    title_1d: str = "MCMC 1D Marginal Distributions Comparison",
    title_2d: str = "MCMC 2D Marginal Distributions Comparison",
    save_path_1d: Optional[str] = None,
    save_path_2d: Optional[str] = None,
    figsize_1d: Optional[Tuple[int, int]] = None,
    figsize_2d: Optional[Tuple[int, int]] = None,
    xlims: Optional[list[float]] = None,
    alpha: float = 0.6,
    show_2d: bool = True,
    show: bool = True,
):
    """
    Load MCMC results from npz file and plot marginal distribution comparisons.

    Args:
        npz_file_path: Path to the npz file containing MCMC results
                      Expected structure: npz[method_name]["samples"] = array of samples
        parameter_names: Optional list of parameter names for labeling
        true_values: Optional true parameter values to overlay
        title_1d: Title for 1D marginal comparison plot
        title_2d: Title for 2D marginal comparison plot
        save_path_1d: Optional path to save 1D comparison figure
        save_path_2d: Optional path to save 2D comparison figure
        figsize_1d: Figure size for 1D plot
        figsize_2d: Figure size for 2D plot
        xlims: Optional x-axis limits for 1D plots
        alpha: Transparency for 2D scatter plots
        show_2d: Whether to show 2D plots if samples have >1 dimension
    """
    logger.info(f"Loading MCMC results from: {npz_file_path}")

    # Load npz file
    try:
        mcmc_data = np.load(npz_file_path, allow_pickle=True)
    except Exception as e:
        raise FileNotFoundError(f"Could not load npz file: {e}")

    # Extract samples for each method
    samples_dict = {}
    method_info = {}

    for method_name in mcmc_data.files:
        method_data = mcmc_data[method_name].item()  # Convert to dict

        if "samples" in method_data:
            samples = np.array(method_data["samples"])
            samples_dict[method_name] = samples

            # Store additional info for logging
            method_info[method_name] = {
                "n_samples": samples.shape[0],
                "n_dims": samples.shape[1] if samples.ndim > 1 else 1,
                "acceptance_rate": method_data.get("acceptance_rate", "Unknown"),
            }

            logger.info(
                f"  - {method_name}: {samples.shape} samples, "
                f"acceptance rate: {method_info[method_name]['acceptance_rate']}"
            )
        else:
            logger.warning(f"No 'samples' found for method '{method_name}'")

    if not samples_dict:
        raise ValueError("No valid samples found in npz file")

    # Determine number of dimensions from first method
    first_samples = list(samples_dict.values())[0]
    n_dims = first_samples.shape[1] if first_samples.ndim > 1 else 1

    logger.info(f"Found {len(samples_dict)} methods with {n_dims}D samples")

    # Plot 1D marginal comparisons
    logger.info("Generating 1D marginal comparison...")
    plot_1D_marginal_comparison(
        samples_dict=samples_dict,
        parameter_names=parameter_names,
        true_values=true_values,
        title=title_1d,
        save_path=save_path_1d,
        figsize=figsize_1d,
        xlims=xlims,
        show=show,
    )

    # Plot 2D marginal comparisons if samples have more than 1 dimension
    if n_dims > 1 and show_2d:
        logger.info("Generating 2D marginal comparison...")
        plot_2D_marginal_comparison(
            samples_dict=samples_dict,
            parameter_names=parameter_names,
            true_values=true_values,
            title=title_2d,
            save_path=save_path_2d,
            figsize=figsize_2d,
            alpha=alpha,
            show=show,
        )
    elif n_dims == 1:
        logger.info("Skipping 2D plots (samples are 1-dimensional)")
    else:
        logger.info("Skipping 2D plots (show_2d=False)")

    logger.info("MCMC posterior comparison plots completed!")

    return samples_dict, method_info


def plot_mcmc_posterior_comparison_command(args):
    """
    Main command function for plotting MCMC posterior comparisons.

    Args:
        args: Parsed command line arguments
    """
    logger.info("=== ABC-NRE Plot MCMC Posterior Comparison ===")

    # Validate input file
    npz_file = Path(args.npz_file)
    if not npz_file.exists():
        raise FileNotFoundError(f"NPZ file not found: {npz_file}")

    # Parse parameter names
    parameter_names = None
    if args.parameter_names:
        parameter_names = args.parameter_names.split(",")
        parameter_names = [name.strip() for name in parameter_names]

    # Parse true values
    true_values = None
    if args.true_values:
        try:
            true_values = np.array(
                [float(x.strip()) for x in args.true_values.split(",")]
            )
        except ValueError:
            raise ValueError("True values must be comma-separated numbers")

    # Parse xlims
    xlims = None
    if args.xlims:
        try:
            xlim_pairs = args.xlims.split(";")
            xlims = []
            for pair in xlim_pairs:
                if pair.strip():
                    lower, upper = pair.split(",")
                    xlims.append((float(lower.strip()), float(upper.strip())))
        except ValueError:
            raise ValueError(
                "xlims must be in format 'lower1,upper1;lower2,upper2;...'"
            )

    # Parse figure sizes
    figsize_1d = None
    if args.figsize_1d:
        try:
            width, height = args.figsize_1d.split(",")
            figsize_1d = (int(width.strip()), int(height.strip()))
        except ValueError:
            raise ValueError("figsize_1d must be in format 'width,height'")

    figsize_2d = None
    if args.figsize_2d:
        try:
            width, height = args.figsize_2d.split(",")
            figsize_2d = (int(width.strip()), int(height.strip()))
        except ValueError:
            raise ValueError("figsize_2d must be in format 'width,height'")

    # Setup save paths
    save_path_1d = None
    save_path_2d = None

    if args.save_path_1d:
        save_path_1d = handle_output_path(args.save_path_1d, "mcmc_comparison_1d.png")

    if args.save_path_2d:
        save_path_2d = handle_output_path(args.save_path_2d, "mcmc_comparison_2d.png")

    # Run the plotting function
    try:
        samples_dict, method_info = plot_mcmc_posterior_comparison(
            npz_file_path=str(npz_file),
            parameter_names=parameter_names,
            true_values=true_values,
            title_1d=args.title_1d,
            title_2d=args.title_2d,
            save_path_1d=str(save_path_1d) if save_path_1d else None,
            save_path_2d=str(save_path_2d) if save_path_2d else None,
            figsize_1d=figsize_1d,
            figsize_2d=figsize_2d,
            xlims=xlims,
            alpha=args.alpha,
            show_2d=not args.no_2d,
            show=not args.no_show,
        )

        # Print summary
        logger.info("\n=== Plot Summary ===")
        for method_name, info in method_info.items():
            logger.info(f"{method_name}:")
            logger.info(f"  Samples: {info['n_samples']}")
            logger.info(f"  Dimensions: {info['n_dims']}")
            logger.info(f"  Acceptance rate: {info['acceptance_rate']}")

        if save_path_1d:
            logger.info(f"1D plot saved to: {save_path_1d}")
        if save_path_2d:
            logger.info(f"2D plot saved to: {save_path_2d}")

        logger.info("===================")

    except Exception as e:
        logger.error(f"Error generating plots: {e}")
        raise


def setup_plot_mcmc_posterior_comparison_parser(subparsers):
    """Setup argument parser for plot_mcmc_posterior_comparison command."""
    parser = subparsers.add_parser(
        "plot_mcmc_posterior_comparison",
        help="Plot MCMC posterior comparison from npz file",
        description="""
        Load MCMC results from an npz file and create comparison plots of 1D and 2D 
        marginal distributions across different sampling methods.
        
        The npz file should contain results from the 'run_mcmc' command with structure:
        npz[method_name]["samples"] = array of samples (n_samples, n_dims)
        """,
    )

    # Required arguments
    parser.add_argument(
        "npz_file", type=str, help="Path to npz file containing MCMC results"
    )

    # Optional arguments
    parser.add_argument(
        "--parameter-names",
        type=str,
        help="Comma-separated parameter names for labels (e.g., 'θ₁,θ₂,θ₃')",
    )

    parser.add_argument(
        "--true-values",
        type=str,
        help="Comma-separated true parameter values to overlay (e.g., '1.5,0.8,2.1')",
    )

    parser.add_argument(
        "--title-1d",
        type=str,
        default="MCMC 1D Marginal Distributions Comparison",
        help="Title for 1D marginal comparison plot",
    )

    parser.add_argument(
        "--title-2d",
        type=str,
        default="MCMC 2D Marginal Distributions Comparison",
        help="Title for 2D marginal comparison plot",
    )

    parser.add_argument(
        "--alpha",
        type=float,
        default=0.6,
        help="Transparency for 2D scatter plots (default: 0.6)",
    )

    parser.add_argument(
        "--xlims",
        type=str,
        help="X-axis limits for 1D plots in format 'lower1,upper1;lower2,upper2;...'",
    )

    parser.add_argument(
        "--figsize-1d",
        type=str,
        help="Figure size for 1D plot as 'width,height' (e.g., '15,8')",
    )

    parser.add_argument(
        "--figsize-2d",
        type=str,
        help="Figure size for 2D plot as 'width,height' (e.g., '15,10')",
    )

    parser.add_argument(
        "--save-path-1d", type=str, help="Path to save 1D comparison figure"
    )

    parser.add_argument(
        "--save-path-2d", type=str, help="Path to save 2D comparison figure"
    )

    parser.add_argument(
        "--no-2d",
        action="store_true",
        help="Skip 2D marginal plots even if data is multidimensional",
    )

    parser.set_defaults(func=plot_mcmc_posterior_comparison_command)
    return parser
